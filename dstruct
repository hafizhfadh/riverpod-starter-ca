#!/bin/bash

# Function to create a directory with error handling, handling Mac-specific path separators
function create_dir() {
  if [[ ! -d "$1" ]]; then
    mkdir -p "$1" || { echo "Error creating directory: $1" >&2; exit 1; }
  fi
}

# Function to create a file with content
function create_file() {
  touch "$1"
  cat > "$1" <<-EOF
# Placeholder content for $1
EOF
}

# Function to create layer file with customizable name
function create_layer_file() {
  feature_name="$1"
  layer_name="$2"
  file_name="$3"

  # If no filename provided, use layer name with appropriate extension as fallback
  if [[ -z "$file_name" ]]; then
    file_name="${layer_name}.dart"
  else
    # Ensure filename has an extension (use .dart for consistency)
    if [[ ! "${file_name}" =~ \.dart$ ]]; then
      file_name="${file_name}.dart"
    fi
  fi

  # Construct the full path with forward slashes (/) for macOS compatibility
  full_path="lib/$feature_name/$layer_name/$file_name"

  # Create directories for the feature if they don't exist
  create_dir "lib/$feature_name/$layer_name"

  create_file "$full_path"
}

# Function to create feature structure
function create_feature() {
  feature_name="$1"

  # Create the main feature directory
  create_dir "lib/$feature_name"

  # Check for flags and create corresponding files with custom names
  all_flag=false
  while [[ $# -gt 1 ]]; do
    key="$2"
    case $key in
      -p)
        layer_name="presentation"
        file_name="${3:-$layer_name}"
        create_layer_file "$feature_name" "$layer_name" "$file_name"
        shift 2
        ;;
      -a)
        layer_name="application"
        file_name="${3:-$layer_name}"
        create_layer_file "$feature_name" "$layer_name" "$file_name"
        shift 2
        ;;
      -d)
        layer_name="domain"
        file_name="${3:-$layer_name}"
        create_layer_file "$feature_name" "$layer_name" "$file_name"
        shift 2
        ;;
      -do)
        layer_name="data"
        file_name="${3:-$layer_name}"
        create_layer_file "$feature_name" "$layer_name" "$file_name"
        shift 2
        ;;
      --all)
        all_flag=true
        shift
        ;;
      *)
        echo "Unknown option: $key"
        exit 1
        ;;
    esac
  done

  # Create all layers if --all flag is used
  if [[ $all_flag ]]; then
    create_layer_file "$feature_name" "presentation"
    create_layer_file "$feature_name" "application"
    create_layer_file "$feature_name" "domain"
    create_layer_file "$feature_name" "data"
  fi
}

# Check for feature name argument
if [[ -z "$1" ]]; then
  echo "Please specify a feature name."
  exit 1
fi

# Call the create_feature function with provided arguments
create_feature "$@"

echo "Feature structure created successfully!"
